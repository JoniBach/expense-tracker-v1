{"version":3,"sources":["components/ExpensesDashboard/ExpensesDashboard.style.js","expenses.config.js","components/ExpensesDashboard/ExpensesDashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["drawerWidth","makeStyles","theme","root","display","textFields","margin","spacing","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","flexGrow","padding","purchaseTypeOptions","typeOption","ExpensesDashboard","props","classes","useStyles","useTheme","useState","newPurchase","setnewPurchase","newStoreName","setStoreName","newTotalSpend","settotalSpend","newPurchaseType","setPurchaseType","React","Date","newSelectedDate","setnewSelectedDate","showPurchaseType","setShowPurchaseType","showPurchaseHistory","setshowPurchaseHistory","showMyPurchases","setShowMyPurchases","showAddNewPurchase","setShowAddNewPurchase","mobileOpen","setMobileOpen","parsedNewTotalSpend","parseInt","formattedDate","getDate","getMonth","getFullYear","parsedDate","toLocaleDateString","year","month","day","split","join","newPurchaseDate","toString","handleDrawerToggle","reducedTotalSpend","reduce","a","b","totalSpend","handleSubmit","event","preventDefault","value","id","label","storeName","purchaseDate","purchaseType","container","sortDateNewOld","sort","className","Divider","List","ListItem","Button","variant","onClick","window","history","back","fullWidth","ListItemIcon","Checkbox","color","checked","onChange","target","inputProps","ListItemText","primary","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","Typography","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","Grid","item","xs","Box","p","align","justifyContent","alignContent","Paper","alignSelf","noValidate","autoComplete","onSubmit","TextField","placeholder","e","Input","type","startAdornment","InputAdornment","disableToolbar","format","date","FormControl","formControl","InputLabel","Select","native","name","map","options","div","whileHover","scale","whileTap","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","py","gutterBottom","defaultStyle","x","style","spring","Math","round","Number","EPSILON","fontWeight","fontStyle","length","ExpansionPanelDetails","TableContainer","Table","table","TableHead","TableRow","TableCell","TableBody","row","overflow","height","data","top","right","bottom","left","innerRadius","padAngle","cornerRadius","colors","scheme","borderWidth","borderColor","from","modifiers","enableRadialLabels","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","slicesLabelsSkipAngle","slicesLabelsTextColor","sliceLabel","motionStiffness","motionDamping","to","emptyColor","yearSpacing","monthBorderColor","dayBorderWidth","dayBorderColor","legends","translateY","itemCount","itemWidth","itemHeight","itemsSpacing","itemDirection","App","utils","DateFnsUtils","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5074f38.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nconst drawerWidth = 240;\n\nexport default makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n\n    },\n    textFields: {\n        '& > *': {\n            margin: theme.spacing(1),\n\n        },\n    },\n    drawer: {\n        [theme.breakpoints.up('sm')]: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n    },\n    appBar: {\n        [theme.breakpoints.up('sm')]: {\n            width: `calc(100% - ${drawerWidth}px)`,\n            marginLeft: drawerWidth,\n        },\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up('sm')]: {\n            display: 'none',\n        },\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n}));\n","\nexport const purchaseTypeOptions = [\n    { typeOption: 'Other' },\n    { typeOption: 'Groceries' },\n    { typeOption: 'Entertainment' },\n    { typeOption: 'Appliances' },\n    { typeOption: 'Household' },\n    { typeOption: 'Personal' },\n    { typeOption: 'Electronics' },\n];","/* eslint-disable react/jsx-indent-props */\n/* eslint-disable react/jsx-indent */\nimport React, { useState } from 'react';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { useTheme } from '@material-ui/core/styles';\nimport { motion } from \"framer-motion\"\nimport {\n    Grid,\n    Paper,\n    Box,\n    Button,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    InputAdornment,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    Checkbox,\n    ListItemText,\n    Hidden,\n    Drawer,\n    Divider,\n    CssBaseline,\n    AppBar,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    FormControl,\n    InputLabel,\n    Input,\n    Select,\n} from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { KeyboardDatePicker } from '@material-ui/pickers';\nimport { ResponsivePie } from '@nivo/pie';\nimport useStyles from './ExpensesDashboard.style';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { ResponsiveCalendar } from '@nivo/calendar'\nimport { Motion, spring } from 'react-motion';\nimport { purchaseTypeOptions } from '../../expenses.config'\n\nexport default function ExpensesDashboard(props) {\n    // Importing Style and theme\n    const classes = useStyles();\n    const theme = useTheme();\n    // Setting state for newly entered variables\n    const [newPurchase, setnewPurchase] = useState([]);\n    const [newStoreName, setStoreName] = useState('');\n    const [newTotalSpend, settotalSpend] = useState();\n    const [newPurchaseType, setPurchaseType] = useState('');\n    const [newSelectedDate, setnewSelectedDate] = React.useState(new Date());\n    // Setting state for hiding components with ternary operators\n    const [showPurchaseType, setShowPurchaseType] = React.useState(true);\n    const [showPurchaseHistory, setshowPurchaseHistory] = React.useState(true);\n    const [showMyPurchases, setShowMyPurchases] = React.useState(true);\n    const [showAddNewPurchase, setShowAddNewPurchase] = React.useState(false);\n    // Setting state for changing drawer when a mobile user is detected\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n\n    // parsing is required to convert the string received into a number type\n    const parsedNewTotalSpend = parseInt(newTotalSpend);\n\n    // formatting the date to look more readable\n    const formattedDate = newSelectedDate.getDate() + '/' + (newSelectedDate.getMonth() + 1) + '/' + newSelectedDate.getFullYear()\n    const localDate = newSelectedDate.toLocaleDateString('fr-CA', { year: 'numeric', month: '2-digit', day: '2-digit' });\n    // const formattedDateCalendar = newSelectedDate.getFullYear() + '-' + (newSelectedDate.getMonth() + 1) + '-' + newSelectedDate.getDate()\n    // const month = newSelectedDate.getMonth() + 1;\n    const parsedDate = localDate.split(\"/\").join(\"-\");\n    // Assigning the output for the purchase date to a string\n    const newPurchaseDate = (!formattedDate ? 'no date selected' : formattedDate.toString());\n    // settinng event handlers to enable updating variable\n    const handleDateChange = (date) => {\n        setnewSelectedDate(date);\n    };\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n    const handleshowPurchaseType = (event) => {\n        setShowPurchaseType(event.target.checked);\n    };\n    const handleshowPurchaseHistory = (event) => {\n        setshowPurchaseHistory(event.target.checked);\n    };\n    const handleshowMyPurchases = (event) => {\n        setShowMyPurchases(event.target.checked);\n    };\n    const handleShowAddNewPurchase = () => {\n        setShowAddNewPurchase(true);\n    };\n    const handleHideAddNewPurchase = () => {\n        setShowAddNewPurchase(false);\n    };\n    // calculating total spend and resolving null values as 0 so not to break total sum\n    const reducedTotalSpend = newPurchase.reduce((a, b) => a + (!b.totalSpend ? 0 : b.totalSpend), 0);\n    // setting an event handler to add the incoming data to an object in the newPurchase array\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setnewPurchase([\n            ...newPurchase,\n            // order the purchases by value\n            {\n                day: parsedDate, value: parsedNewTotalSpend, id: newPurchaseType, label: newPurchaseType, totalSpend: parsedNewTotalSpend, storeName: newStoreName, purchaseDate: newPurchaseDate, purchaseType: newPurchaseType,\n            },\n        ]);\n    };\n\n    const { container } = props;\n    // sorting functions for ordering the list views\n    // const sortTotalSpendLowHigh = newPurchase.sort(function (a, b) {\n    //     if (a.value > b.value) return 1;\n    //     if (a.value < b.value) return -1;\n    //     return 0;\n    // });\n    // const sortTotalSpendHighLow = newPurchase.sort(function (a, b) {\n    //     if (a.value < b.value) return 1;\n    //     if (a.value > b.value) return -1;\n    //     return 0;\n    // });\n    const sortDateNewOld = newPurchase.sort(function (a, b) {\n        if (a.day < b.day) return 1;\n        if (a.day > b.day) return -1;\n        return 0;\n    });\n    // const sortDateOldNew = newPurchase.sort(function (a, b) {\n    //     if (a.day > b.day) return 1;\n    //     if (a.day < b.day) return -1;\n    //     return 0;\n    // });\n    function goBack() {\n        window.history.back();\n    }\n    const drawer = (\n        <div className={classes.root}>\n\n            <div className={classes.toolbar} />\n            <Divider />\n            <List>\n                <ListItem>\n                    <Button variant=\"outlined\" onClick={goBack} fullWidth={true} >Return</Button>\n                </ListItem>\n\n                <ListItem>\n                    <ListItemIcon>\n                        <Checkbox\n                            color=\"primary\"\n                            checked={showMyPurchases}\n                            onChange={handleshowMyPurchases}\n                            inputProps={{ 'aria-label': 'primary checkbox' }}\n                        />\n                    </ListItemIcon>\n                    <ListItemText primary=\"How much have you spent?\" />\n                </ListItem>\n\n                <ListItem>\n                    <ListItemIcon>\n                        <Checkbox\n                            color=\"primary\"\n                            checked={showPurchaseHistory}\n                            onChange={handleshowPurchaseHistory}\n                            inputProps={{ 'aria-label': 'primary checkbox' }}\n                        />\n                    </ListItemIcon>\n                    <ListItemText primary=\"What type of stores do you shop at?\" />\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <Checkbox\n                            color=\"primary\"\n                            checked={showPurchaseType}\n                            onChange={handleshowPurchaseType}\n                            inputProps={{ 'aria-label': 'primary checkbox' }}\n                        />\n                    </ListItemIcon>\n                    <ListItemText primary=\"See your purchase history\" />\n                </ListItem>\n\n            </List>\n            <Divider />\n        </div>\n    );\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            {/* Top Nav Bar */}\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerToggle}\n                        className={classes.menuButton}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Your Expenses Dashboard\n                    </Typography>\n                    <Typography variant=\"body2\" noWrap>\n                        .ALPHA\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            {/* implementing hidable drawer */}\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                <Hidden smUp implementation=\"css\">\n                    <Drawer\n                        container={container}\n                        variant=\"temporary\"\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                        open={mobileOpen}\n                        onClose={handleDrawerToggle}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden xsDown implementation=\"css\">\n                    <Drawer\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        variant=\"permanent\"\n                        open\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                {/* setting up the main grid */}\n                <Grid container>\n                    {/* rendering new purchase card */}\n                    <Grid item xs={12}>\n\n                        <Box p={2} width=\"100%\" align=\"center\" justifyContent=\"center\" alignContent=\"center\">\n                            <Paper>\n                                <Box width=\"100%\" alignSelf=\"flex-start\" p={2}>\n\n                                    <Button variant=\"contained\" color=\"primary\" onClick={handleShowAddNewPurchase}>\n                                        <Typography>\n                                            Add New purchase\n                                        </Typography>\n                                    </Button>\n                                </Box>\n                                <Box width=\"100%\">\n                                    {showAddNewPurchase ? (\n                                        <Grid item xs={6}>\n\n\n                                            <Box p={2}>\n                                                <form\n                                                    className={classes.textFields}\n                                                    noValidate\n                                                    autoComplete=\"off\"\n                                                    onSubmit={handleSubmit}\n\n                                                >\n                                                    <TextField\n                                                        label=\"Store Name\"\n                                                        placeholder=\"What store did you shop at?\"\n                                                        fullWidth\n                                                        value={newStoreName}\n                                                        onChange={(e) => setStoreName(e.target.value)}\n                                                    />\n\n                                                    {/* <Autocomplete\n                                                        {...defaultProps}\n                                                        options={StoreNamesList}\n                                                        getOptionLabel={(option) => option.store}\n                                                        onChange={(e) => setStoreName(e.target.value)}\n                                                        renderInput={(params) =>\n                                                            <TextField {...params} label=\"Shop Name\" />}\n                                                    /> */}\n                                                    {/* <AutoFill /> */}\n\n\n                                                    <Input\n                                                        fullWidth\n                                                        placeholder=\"How much did you spend?\"\n                                                        type=\"Number\"\n                                                        value={newTotalSpend}\n                                                        onChange={(e) => settotalSpend(e.target.value)}\n                                                        startAdornment={<InputAdornment position=\"start\">£</InputAdornment>}\n                                                    />\n                                                    {/* <MuiPickersUtilsProvider utils={DateFnsUtils}> */}\n                                                    <KeyboardDatePicker\n                                                        disableToolbar\n                                                        fullWidth\n                                                        variant=\"inline\"\n                                                        format=\"dd/MM/yyyy\"\n                                                        margin=\"normal\"\n                                                        id=\"date-picker-inline\"\n                                                        label=\"Purchase Date\"\n                                                        value={newSelectedDate}\n                                                        onChange={handleDateChange}\n                                                    // onChange={(e) => handleDateChange(e.target.value)}\n                                                    />\n                                                    <FormControl fullWidth className={classes.formControl}>\n                                                        <InputLabel>Purchase Type</InputLabel>\n                                                        <Select\n                                                            native\n                                                            value={newPurchaseType}\n                                                            onChange={(e) => setPurchaseType(e.target.value)}\n                                                            inputProps={{\n                                                                name: 'Purchase Type',\n                                                            }}\n                                                        >\n                                                            {\n                                                                purchaseTypeOptions.map((options) => (\n                                                                    <option>{options.typeOption}</option>\n                                                                ))\n                                                            }\n                                                        </Select>\n                                                    </FormControl>\n                                                    {/* </MuiPickersUtilsProvider> */}\n                                                    <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n                                                        <Typography>\n                                                            Submit\n                                                        </Typography>\n                                                    </Button>\n                                                    <Button variant=\"contained\" color=\"warning\" onClick={handleHideAddNewPurchase}>\n                                                        <Typography>\n                                                            Cancel\n                                                        </Typography>\n                                                    </Button>\n                                                </form>\n                                            </Box>\n                                        </Grid>\n                                    )\n                                        : null}\n                                </Box>\n                            </Paper>\n                        </Box>\n                    </Grid>\n\n\n                    {showMyPurchases ? (\n                        <Grid item xs={12}>\n                            <motion.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }} >\n\n                                <Box p={2}>\n\n                                    <ExpansionPanel>\n                                        <ExpansionPanelSummary\n                                            expandIcon={<ExpandMoreIcon />}\n                                            aria-controls=\"panel1a-content\"\n                                            id=\"panel1a-header\"\n                                        >\n                                            <Box width=\"100%\" align=\"center\" justifyContent=\"center\" alignContent=\"center\">\n                                                <Box width=\"100%\" alignSelf=\"center\" py={1} variant=\"h5\">\n                                                    <Typography gutterBottom>\n                                                        Total Spend\n                                                </Typography>\n                                                    <Typography color=\"primary\" variant=\"h4\">\n\n                                                        <Motion defaultStyle={{ x: 0 }} style={{ x: spring(reducedTotalSpend) }}>\n                                                            {(value) => <Typography color=\"primary\" variant=\"h4\">£{Math.round((value.x + Number.EPSILON) * 100) / 100}</Typography>}\n\n                                                        </Motion>\n                                                    </Typography>\n\n                                                    <Box fontWeight=\"fontWeightLight\" fontStyle=\"oblique\">in {newPurchase.length} purchases</Box>\n\n                                                </Box>\n                                            </Box>\n                                        </ExpansionPanelSummary>\n                                        <ExpansionPanelDetails>\n                                            <TableContainer>\n                                                <Table className={classes.table} aria-label=\"simple table\">\n                                                    <TableHead>\n                                                        <TableRow>\n                                                            <TableCell>Total</TableCell>\n                                                            <TableCell>Store</TableCell>\n                                                            <TableCell>Date</TableCell>\n                                                            <TableCell>Type</TableCell>\n                                                        </TableRow>\n                                                    </TableHead>\n\n\n\n                                                    <TableBody>\n                                                        {sortDateNewOld.map((row) => (\n                                                            <TableRow key={row.name}>\n                                                                <TableCell>\n                                                                    {row.totalSpend}\n                                                                </TableCell>\n                                                                <TableCell>{row.storeName}</TableCell>\n                                                                <TableCell>{row.purchaseDate}</TableCell>\n                                                                <TableCell>{row.purchaseType}</TableCell>\n                                                            </TableRow>\n                                                        ))}\n                                                    </TableBody>\n                                                </Table>\n                                            </TableContainer>\n                                        </ExpansionPanelDetails>\n                                    </ExpansionPanel>\n\n                                </Box>\n                            </motion.div>\n\n                        </Grid>\n                    )\n                        : null}\n                    {/* rendering purchase type card if checkbox is true */}\n                    {showPurchaseType ? (\n                        <Grid item xs={12}>\n                            <Box p={2} width=\"100%\" align=\"center\" justifyContent=\"center\" alignContent=\"center\">\n                                <Paper>\n                                    <Box width=\"100%\" alignSelf=\"center\" py={1} overflow=\"auto\">\n                                        <Typography>\n                                            Purchase Type\n                                        </Typography>\n                                        <div style={{ height: '300px' }}>\n                                            <ResponsivePie\n                                                data={newPurchase}\n                                                margin={{\n                                                    top: 20, right: 20, bottom: 20, left: 20,\n                                                }}\n                                                innerRadius={0.5}\n                                                padAngle={0.7}\n                                                cornerRadius={3}\n                                                colors={{ scheme: 'nivo' }}\n                                                borderWidth={1}\n                                                borderColor={{ from: 'color', modifiers: [['darker', 0.2]] }}\n                                                enableRadialLabels={false}\n                                                radialLabelsSkipAngle={10}\n                                                radialLabelsTextXOffset={6}\n                                                radialLabelsTextColor=\"#333333\"\n                                                radialLabelsLinkOffset={0}\n                                                radialLabelsLinkDiagonalLength={16}\n                                                radialLabelsLinkHorizontalLength={24}\n                                                radialLabelsLinkStrokeWidth={1}\n                                                radialLabelsLinkColor={{ from: 'color' }}\n                                                slicesLabelsSkipAngle={10}\n                                                slicesLabelsTextColor=\"#333333\"\n                                                sliceLabel=\"id\"\n                                                motionStiffness={90}\n                                                motionDamping={15}\n                                            />\n                                        </div>\n                                    </Box>\n                                </Paper>\n                            </Box>\n                        </Grid>\n                    )\n                        : null}\n                    {/* rendering purchase type card if checkbox is true */}\n                    {showPurchaseHistory ? (\n                        <Grid item xs={12}>\n                            <Box p={2} width=\"100%\" align=\"center\" justifyContent=\"center\" alignContent=\"center\">\n                                <Paper>\n                                    <Box width=\"100%\" alignSelf=\"center\" py={1} overflow=\"auto\">\n                                        <Typography>\n                                            Purchase History\n                                        </Typography>\n                                        <div style={{ height: '300px' }}>\n                                            <ResponsiveCalendar\n                                                data={newPurchase}\n                                                from=\"2020-04-01\"\n                                                to=\"2020-04-30\"\n                                                emptyColor=\"#eeeeee\"\n                                                colors={['#61cdbb', '#97e3d5', '#e8c1a0', '#f47560']}\n                                                margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n                                                yearSpacing={40}\n                                                monthBorderColor=\"#ffffff\"\n                                                dayBorderWidth={2}\n                                                dayBorderColor=\"#ffffff\"\n                                                legends={[\n                                                    {\n                                                        anchor: 'bottom-right',\n                                                        direction: 'row',\n                                                        translateY: 36,\n                                                        itemCount: 4,\n                                                        itemWidth: 42,\n                                                        itemHeight: 36,\n                                                        itemsSpacing: 14,\n                                                        itemDirection: 'right-to-left',\n                                                    },\n                                                ]}\n                                            />\n                                        </div>\n                                    </Box>\n                                </Paper>\n                            </Box>\n                        </Grid>\n                    )\n                        : null}\n                </Grid>\n            </main>\n        </div>\n    );\n}\n","import { MuiPickersContext } from '@material-ui/pickers';\nimport './App.css';\nimport ExpensesDashboard from './components/ExpensesDashboard/ExpensesDashboard'\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nfunction App() {\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <ExpensesDashboard />\n    </MuiPickersUtilsProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}